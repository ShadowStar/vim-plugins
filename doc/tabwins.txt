*tabwins.txt* Create tabs of symmetric or asymmetric windows, populated or empty
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
||                                                                ||   ~
||             _        _                _                        ||   ~
||            | |      | |              (_)                       ||   ~
||            | |_ __ _| |__   __      ___ _ __  ___              ||   ~
||            | __/ _` | '_ \  \ \ /\ / / | '_ \/ __|             ||   ~
||            | || (_| | |_) |  \ V  V /| | | | \__ \             ||   ~
||             \__\__,_|_.__/    \_/\_/ |_|_| |_|___/             ||   ~
||                                                                ||   ~
||                                                                ||   ~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*v2.2.0* 


====================================================================
CONTENTS                                            *TabwinsContents*
====================================================================

    1. Introduction ......... |TabwinsIntroduction|
    2. Usage ................ |TabwinsUsage|
    3. Vertical & Horizontal  |TabwinsVandH|
    4. Tabwins Menu ......... |TabwinsMenu|
    5. Configuration ........ |TabwinsConfiguration|
    6. Adding New Builders .. |TabwinsAddingNewBuilders|
    7. License .............. |TabwinsLicense|
    8. Bugs ................. |TabwinsBugs|
    9. Distributions ........ |TabwinsDistributions|
   10. Release History .......|TabwinsReleases|
   11. Credits .............. |TabwinsCredits|


====================================================================
Section 1: Introduction                         *TabwinsIntroduction*
====================================================================

Easy access to the power of the Vim GUI. ~

See the screen shots at ~
  https://github.com/cesheridan/graphics/tree/master/tabwins ~


1 command for immediate access to customized window structures 
and content ~during~ Vim sessions.

The Developer 
  - Avoids hit-or-miss, time-consuming, manual, repetitious 
    runs of :split/:vsplit, and thought-sinks about how 
    to produce an intended window structure

  - Avoids losing current configurations due to mid-session 
    reloads of backed-up Vim sessions that have preferred
    window structures

  - Avoids loss of focus from these discontinuities


FORMS *--*

  :{Tabwins cmd}   {window_dimensions}; {fill_content,...};  {tab_option, ...}
  :{symmetric cmd}                      {fill_content,...};  {tab_option, ...}

  Where
   :{Tabwins cmd}   is any of :Tabwins, :TabwinsVertical, :TabwinsHorizontal
   :{symmetric cmd} is any of the form :{V|H}IxJ or :{V|H}I 

  Semicolons separate arg groups, commas separate inside groups.

  {window_dimensions} is the only mandatory arg, only in :{Tabwins cmd}

  SECTION |TabwinsUsage| IN tabwins.txt HAS MORE DETAIL. 


EXAMPLES *--*

  >> Empty Windows 

  :Tabwins 1211 ~
  " For a new tab of 4 columns of 1, 2, 1, & 1 windows successively
  " left to right, with buffers empty.

  :TabwinsHorizontal 4221 ~
  " For a new tab of 4 rows, with 4,2,2, & 1 windows successively 
  " top to bottom, with buffers empty.


  >> Populated Windows 

  :Tabwins            1211; $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin' ~
  " Populate the buffers
  " => 'fill_content' specs of files are automatically opened via :edit,
  "    while specs of dirs are opened via :Explore
  " (Specify an '' empty string for windows intended to be empty.)

  :Tabwins           11111; $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin' ~
  " Same buffer content, in different window structure, of 5 cols, 
  " one window in each.

  :TabwinsHorizontal 11111; $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin' ~
  " Flip axis priority of above to the horizontal

  :Tabwins             312; '~/.bashrc', '~/.vimrc', '~/.git', $HOME, '/', '/usr/bin' ~


  >> Symmetric Window Structures

  :V5x8 ~
  :H5x8 ~
  :V8x14 ~
  :H8x14 ~
  "Empty windows

  :V5x1 $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin' ~
  " Structure & content same as :Tabwins 11111 above

  :V5   $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin' ~
  " Same result again: since the secondary axis has only 1 
  " window for its dimensions, V5 is available as an even
  " shorter alias.


  >> Dimensions >9

  :Tabwins [ 5, 8, 13, 21 ] ~
  " For a 4-column tab with 5, 8, 13, 21 windows successively left to right.

  :Tabwins [ 14, 14 ] ~
  " Alternately, :V2x14

  :Tabwins [ 40, 30, 40, 30 ] ~
  " For large monitors ...


  >> fill_specs with Multiple Commands

  :Tabwins 1112;  $HOME, '~/.bashrc', '~/.vimrc', '/', 'Explore /usr/bin | resize 20' ~
  " Does a :resize of the last window, via Vim '|' command concat.  If a file 
  " or dir is followed with concated commands, the caller needs to explicitly 
  " add the command that opens the file or dir, i.e. 'Explore' in this example.


  >> Tab Options

  :Tabwins 1211;  $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin'; 'ending_window_number' : 2 ~
  :Tabwins 1211;  $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin'; 'netrw_liststyle'      : 3 ~

  :Tabwins 1211;  $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin'; 'netrw_liststyle'      : 3, 'ending_window_number' : 2 ~
  " Multiple tab_options in same command.

TABWINS MENU *--*

  Default settings load Vim menu Tabwins, for access to selected 
                        ~~~~~~~~~~~~~~~~~
  tab-builder commands.  Those and additional tab builders are 
  available via Vim commands defined in tabwins.vim. The menu has 
  only a small portion of the tab builders defined in tabwins.vim.


DEPLOYMENT *--*

  tabwins.vim tabwins/ dir is structured for deployment in a 
  pathogen-managed bundle directory, e.g. ~/.vim/bundle/


  In a ~/.vim dir not configured for pathogen, put
    tabwins/plugin/* into ~/.vim/plugin/ 
  and
    tabwins/doc/*    into ~/.vim/doc/ 


  Enable :h tabwins in a pathogen environment with
    :Helptags
  and in a non-pathogen environment with
    :helptags


====================================================================
Section 2: Usage                                       *TabwinsUsage*
====================================================================

=> See FORMS    in |TabwinsIntroduction|
=> See EXAMPLES in |TabwinsIntroduction|


THREE TABWINS COMMANDS *--*

  These commands all take the same arguments.

  :Tabwins ~
    Same as :TabwinsVertical

  :TabwinsVertical ~
    Gives priority to the vertical axis.

  :TabwinsHorizontal  ~
    Gives priority to the horizontal axis.

  See |TabwinsVandH| about primary/secondary axes and 
  vertical/horizontal priority.

  These commands accept arbitrary dimension specification, 
  unconstrained by configuration vars, other than 
  windows-per-tabsize limits of the Vim instance.


SYMMETRIC WINDOW STRUCTURES *--*

  In these, the lengths of the secondary axis dimensions are all 
  equal.
  
  Symmetric commands are available to reduce keystrokes.
  
  'H' indicates horizontal priority, 'V' vertical priority.

  Loading tabwins.vim creates :{V|H}IxJ commands where the 
  set of IxJ is the permutations of:
    g:tabwins_max_v_size  ~
    g:tabwins_max_h_size  ~

  The same global vars determine the set of :{V|H}J commands 
  also produced on tabwins.vim load, where N is from 1 to the 
  value of the relevant g:tabwins_max_{h|v}_size var above.


DIMENSIONS GREATER THAN 9 *--*

  Dimensions >9 are unparsable when {window_dimensions} is 
  an integer.  To enable dimensions >9, use list syntax as
  shown in EXAMPLES of |TabwinsIntroduction|

  List syntax applies to any tab that has dimension >9.
  All the dimensions of such a tab are specified in one list.


FILL SPECS WITH MULTIPLE COMMANDS *--*

  Multiple Vim commands can be specified in a fill_spec by
  prepending commands with the Vim '|' concatenation operator.
  See EXAMPLES in |TabwinsIntroduction|.


TAB OPTIONS *--*

  Available tab_options are as below, with defaults on 
  the right.

  These apply to the entire tab and can be combined when 
  separated by commas.
    
     'explore_cmd_name'          : 'Explore', 
     'netrw_liststyle'           : g:tabwins_netrw_liststyle_default,
     'line_number_at_window_top' : g:tabwins_netrw_line_number_default,

     => Use a fill_spec for window-specific override of the above.

     'first_window_number'       : 1,
     'ending_window_number'      : 1


  See EXAMPLES in |TabwinsIntroduction|.

  Function Fill_tab() processes tab_options.


HELP *--*

  :TabwinsFindTabwins will load the tabwins .vim & .txt files 
  into a V2 window, if your Vim &runtimepath can see them.

  This command is included in the 'Tabwins' menu.


====================================================================
Section 3: Vertical & Horizontal                    *TabwinsVandH*
====================================================================

Windows are built one axis at a time. The first axis built
is the primary axis, and the other axis is the secondary axis.
       ~~~~~~~~~~~~                            ~~~~~~~~~~~~~~~
If the tab starts by building the vertical axis, then the
vertical axis is the primary axis, and the horizontal axis
is the secondary axis. And vice-versa.

What's the difference between Horizontal and Vertical Tabs ? ~

  Structurally, V2x3 is the same as H3x2.  The only difference
  is how Vim numbers the tabs, based on the axis that is the 
  primary axis.  
  
  IF the primary axis is vertical, then numbering starts in 
  col 1 and goes down the windows in col 1, then to the top 
  of col 2, then down col 2, and so on.  
  
  IF the primary axis is horizontal, numbering starts in 
  row 1 and goes left to right, then to row 2, left to right, 
  and so on.

  Most of the asymmetric tab builders defined in the plugin 
  use a vertical primary axis.  Developers can define any 
  mix of primary axis in their own tab builders -- See
  |TabwinsAddingNewBuilders|


====================================================================
Section 4: 'Tabwins' Menu                               *TabwinsMenu*
====================================================================

In the 'Tabwins' menu built on plugin load, the extent that 
populated tabs fill their buffers is dependent on the shell 
vars available to the Vim session, and files/dirs present in 
the local environment.

The menu items reference some of these shell vars.  

The developer is encouraged to customize this menu for local usage.

Update or replace func
  function Tabwins_menu_build() ~
in tabwins.vim to do so.


====================================================================
Section 5: Configuration                      *TabwinsConfiguration*
====================================================================

The below globals are defined in tabwins.vim and are overridable.

To limit tabwins.vim load to once per Vim session:
  let g:tabwins_multiple_loads_are_permitted = 'N' ~
Default: 'Y'

To prevent 'Tabwins' menu addition when tabwins loads:
  let g:load_tabwins_menu_is_wanted          = 'N' ~
Default: 'Y'

To change the 'Tabwins' menu number:
  let g:tabwins_menu_number                  = {menu_number} ~
Default: 9998

To change the default top-line of netrw windows:
  let g:tabwins_netrw_line_number_default    = {N} ~
Default: g:tabwins_netrw_line_number_dirpath = 3
Calls to Fill_tab() can override this on a per-tab basis.

To change the default netrw liststyle:
  let g:tabwins_netrw_liststyle_default      = {N} ~
Default: g:tabwins_netrw_liststyle_default   = 1
Calls to Fill_tab() can override this on a per-tab basis.
if netrw var g:netrw_liststyle is not defined, it gets this value.

To change Vertical/Horizontal max dimensions:
  let g:tabwins_max_v_size                   = {N}~
  let g:tabwins_max_h_size                   = {N}  ~
Default: 15 for each


====================================================================
Section 6: Adding New Builders            *TabwinsAddingNewBuilders*
====================================================================


ADDING SYMMETRIC TAB COMMANDS *--*

  Bump either/both values of:
    g:tabwins_max_v_size ~
    g:tabwins_max_h_size ~

  above the values assigned in tabwins.vim. 
  
  Loading tabwins.vim will build commands for all the HxV and 
  VxH permutations.

  Of course, the set of symmetric tab builder commands can be reduced by 
  lowering the values of the same globals.


MORE GENERALLY *--*
  
  Create your own Vim commands from the various : commands in 
  wintabs.vim.  See the plugin code for examples.

  See HELP in |TabwinsIntroduction|.

====================================================================
Section 7: License                                  *TabwinsLicense*
====================================================================

Copyright (c) 2013, Charles E. Sheridan

This program is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation,
version 2 of the License.
This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.

See the GNU General Public License version 2 for more details.


====================================================================
Section 8: Bugs                                        *TabwinsBugs*
====================================================================

Send bug reports and proposed fixes to 
  opensource at att.net


====================================================================
Section 9: Distributions                       *TabwinsDistributions*
====================================================================

github repository for this plugin
   https://github.com/cesheridan/tabwins ~


The top-level of the github repository includes an html version of 
this Vim .txt file, viewable in rendered form via
   http://htmlpreview.github.io/?https://github.com/cesheridan/tabwins/blob/master/tabwins.txt.html    ~


vim.org URL of this plugin 
   http://www.vim.org/scripts/script.php?script_id=4767


The distribution at vim.org is taken from the github repository.


====================================================================
Section 10: RELEASE HISTORY                        *TabwinsReleases*
====================================================================

v2.2.0   2013-11-24
   - CLI commands support tab_option args
     ALL tabwins.vim capability is now available directly to
     the Vim command line.  A developer should not have to call
     functions in tabwins.vim to create a tabwins command.
   - Add :TabwinsFindTabwins and include it in the 'Tabwins' menu.
   - Add a few more global config vars.
   - Function Fill_tab() arg 'fill_content' renamed => 'fill_specs'
   - Rework documentation.

v2.1.0   2013-11-17
   - fill_specs supported as tabwins.vim CLI commands arg
   - Function Fill_tab() arg 'window_fill_specs' renamed => 'fill_content'

v1.7.0   2013-11-11
   - First vim.org release.

====================================================================
Section 11: Credits                                 *TabwinsCredits*
====================================================================

 Author:  Charles E. Sheridan 
Contact:  opensource at att.net

