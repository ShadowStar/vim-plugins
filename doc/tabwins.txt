*tabwins.txt* Create TABS of WINDOWS of any structure, populated or empty
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
||                                                                ||   ~
||             _        _                _                        ||   ~
||            | |      | |              (_)                       ||   ~
||            | |_ __ _| |__   __      ___ _ __  ___              ||   ~
||            | __/ _` | '_ \  \ \ /\ / / | '_ \/ __|             ||   ~
||            | || (_| | |_) |  \ V  V /| | | | \__ \             ||   ~
||             \__\__,_|_.__/    \_/\_/ |_|_| |_|___/             ||   ~
||                                                                ||   ~
||                                                                ||   ~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


====================================================================
CONTENTS                                            *TabwinsContents*
====================================================================

    1. Introduction ......... |TabwinsIntroduction|
    2. Usage ................ |TabwinsUsage|
    3. Vertical & Horizontal  |TabwinsVandH|
    4. Tabwins Menu ......... |TabwinsMenu|
    5. Configuration ........ |TabwinsConfiguration|
    6. Adding New Builders .. |TabwinsAddingNewBuilders|
    7. License .............. |TabwinsLicense|
    8. Bugs ................. |TabwinsBugs|
    9. Distributions ........ |TabwinsDistributions|
   10. Credits .............. |TabwinsCredits|


====================================================================
Section 1: Introduction                         *TabwinsIntroduction*
====================================================================

See the screen shots at ~
  https://github.com/cesheridan/graphics/tree/master/tabwins ~

1 command for immediate access to Vim customized window structures 
and content ~during~ Vim sessions.

The developer 
  - Avoids hit-or-miss, time-consuming, manual, repetitious 
    runs of :split/:vsplit, and thought-sinks about how 
    to produce an intended window structure

  - Avoids having to reload backed-up Vim sessions that 
    have the required window structures, thus losing the 
    current configuration

  - Avoids loss of focus from these discontinuities

Easy access to the power of the Vim GUI. ~


COMMAND FORMS ~

  :Tabwins {window_dimensions}; {fill_content,...};  {tab_options, ...}
  :{symmetric_command}          {fill_content,...};  {tab_options, ...}

    => semicolons separate arg groups, commas separate inside groups.
    
EXAMPLES ~

  " For a new tab of 4 columns of 1, 2, 1, & 1 windows successively
  " left to right, with buffers empty --
  :Tabwins 1211 ~

  :Tabwins 1211;  $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin' ~
  " Populate the buffers
  " => 'fill_content' specs of files are automatically opened via :edit,
  "    while specs of dirs are opened via :Explore
  " (Specify an '' empty string for windows intended to be empty.)

  :Tabwins 11111; $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin' ~
  " Same buffer content, in different window structure, of 5 cols, 
  " one window in each.

  :V5x1           $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin' ~
  " Structure & content as above -- since the structure is 
  " SYMMETRIC, i.e. lengths of secondary axis dimensions are all 
  " equal, this alternative is available to reduce keystrokes.

  :V5             $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin' ~
  " Same result again: since the secondary axis has only 1 
  " window for its dimensions, V5 is available as an even
  " shorter alias.

  :Tabwins 1112;  $HOME, '~/.bashrc', '~/.vimrc', '/', 'Explore /usr/bin | resize 20' ~
  " Same content, different structure, which includes :resize of the last window,
  " via Vim '|' cmd concat.  If a file or dir is followed with concated commands,
  " the caller needs to explicitly add the command that opens the file or dir, 
  " i.e. 'Explore' in this example.


EXAMPLES: Dimensions >9 ~

  Dimensions >9 are unparsable when {window_dimensions} is 
  an integer.  To enable dimensions >9, use list syntax:

  :Tabwins [ 8, 15, 23, 38] ~
  " For a 4-column tab with 8, 15, 23, & 38 windows successively.
  " {fill_content} can be added as with all tabwins.vim commands.

  :Tabwins [ 18, 23 ] ~

  :Tabwins [ 14, 14 ] ~
  " Alternately, :V2x14

  :Tabwins [ 35, 30, 40, 40 ] ~
  " For large monitors ...


EXAMPLES: {tab_options}  ** AVAILABLE IN A LATER RELEASE ** ~

  [ these are available to callers of function Fill_tab(),
    but not yet to the Vim command line ]

  :Tabwins 1211;  $HOME, '~/.bashrc', '~/.vimrc', '/', '/usr/bin'; 'ending_window_number' : 2

  These have tab-scope.  For window-scoped options, concatenate 
  code to {fill_specs}, as shown above.

  Also see tabwins.txt section |TabwinsAddingNewBuilders|.


:Tabwins, :TabwinsVertical, & :TabwinsHorizontal ~

  :Tabwins is an alias for :TabwinsVertical, which gives
  priority to the vertical axis.

  :TabwinsHorizontal gives priority to the horizontal axis.

  See tabwins.txt section |TabwinsVandH| re vertical/horizontal 
  & primary/secondary axes.


:VJxK, :VJ, :HJxK, & :HJ COMMANDS ~

Loading tabwins.vim creates Vim commands that have name formats
as described in section |TabwinsUsage| of tabwins.txt.

See above examples.


MENU 'Tabwins' ~

  Default settings load Vim menu Tabwins, for access to selected 
                        ~~~~~~~~~~~~~~~~~
  tab-builder commands.  Those and additional tab builders are 
  available via Vim commands defined in tabwins.vim. The menu has 
  only a small portion of the tab builders defined in tabwins.vim,
  and the developer is encouraged to add tab builder commands as needed.


DEPLOYMENT ~

  This plugin is structured for deployment in a pathogen-managed
  bundle directory.  

  See the rest of tabwins.txt for more information.


====================================================================
Section 2: Usage                                       *TabwinsUsage*
====================================================================

NOTE: tabwins.vim v2.1.0 enables Vim command-line spec of buffer  ~
      fill and options.  The below text is still correct, but does  ~
      not cover the v2.1.0 enhancements, which will be described in  ~
      a later release.  The source code is open ... ;-) ~

  Loading tabwins.vim creates Vim commands that have name formats
  as described below.

  See |TabwinsVandH| for background about Vertical/Horizontal 
  and primary/secondary axes.


  DEFAULT AXIS :Tabwins  ~

  :Tabwins is an alias for :TabwinsVertical, meaning
  that the Vertical axis is the default primary axis.


  WINDOWS OF EMPTY BUFFERS, SYMMETRIC & ASYMMETRIC ~

  1) :V{N},  :H{N}, :TabwinsVertical {N}, :TabwinsVertical { [ I ] } ~
     e.g. :V3, :H4, :TabwinsVertical   4, :TabwinsVertical [ 12 ]
                    :Tabwins           4, :Tabwins [ 12 ]

    One-dimensional tabs, w/ primary axis identifed by V or H, and 
    w/ N windows.  
    
    E.g. :V3 creates a tab of 3 vertical windows, and :H4 creates 
    a tab of 4 horizontal windows.

    Loading tabwins.vim creates :HN & :VN commands where N is from
    1 to the value of the relevant axis size in:
       g:tabwins_max_v_size 
       g:tabwins_max_h_size 

    => for dimensions >9 with :Tabwins*(), use a list arg, as above. ~


  2) :V{I}x{J}  & :H{I}x{J}, :TabwinsVertical {J+}, :TabwinsVertical { [ J,J,... ] } ~
     e.g. :V3x2 &     :H4x3, :TabwinsVertical  222, :TabwinsVertical   [ 12, 12, 12 ] 
                             :Tabwins          222, :Tabwins           [ 12, 12, 12 ] 

    Two-dimensional tabs, w/ primary axis identifed by 
    V or H. 
    
    E.g. V3x2 creates a tab of 3 vertical spaces, and inside
    each vertical space, 2 horizontal windows. Whereas H4x3 
    means a tab of 4 rows, each w/ 3 windows.

    The window structures in group 1) are all in
    this group, but here with names like V5x1 rather 
    than V5.

    Loading tabwins.vim creates :VIxJ & :HIxJ commands where 
    the set of {I}x{J} is the permutations of:
       g:tabwins_max_v_size 
       g:tabwins_max_h_size 

    The :TabwinsVertical/Horizontal form accepts arbitrary dimension 
    specification, unconstrained by configuration vars, other than 
    window-per-tab limits of the Vim instance.

    => for dimensions >9 with :Tabwins*(), use a list arg , as above. ~


  3) :TabwinsVertical/Horizontal {J+}, :TabwinsVertical/Horizontal  { [ I, J,... ] } ~
     e.g. :TabwinsVertical 273, :TabwinsVertical [ 12, 7, 16, 2 ] 
          :Tabwins         273, :Tabwins         [ 12, 7, 16, 2 ] 

    Tabs w/ primary axis identifed as Vertical or Horizontal in the 
    command name.  Each integer specifies the number of windows 
    inside each successive vertical or horizontal space. 
    
    E.g. V273 creates a tab w/ 3 vertical spaces, the left having 
    2 horizontal windows, the middle 7, and the right 3.

    => for dimensions >9 with :Tabwins*(), use a list arg , as above. ~


  POPULATED WINDOWS ~

  These can be both symmetric and asymmetric, for both vertical and 
  horizontal priority tabs.  The developer specifies the content that 
  fills each window buffer.  See the examples in the Tabwins menu, 
  as well as documentation in |TabwinsAddingNewBuilders|.


  OPERATING SYSTEMS ~

  Core code has run successfully for gvim on Linux, Sun Solaris, HPUX,
  iMac OS X, MSWIN, & cygwin. 
  
  On MSWIN, demos of populated tabs may fail to load some buffer 
  content due to MSWIN file system syntax conventions.


====================================================================
Section 3: Vertical & Horizontal                    *TabwinsVandH*
====================================================================

Windows are built one axis at a time. The first axis built
is the primary axis, and the other axis is the secondary axis.
       ~~~~~~~~~~~~                            ~~~~~~~~~~~~~~~
If the tab starts by building the vertical axis, then the
vertical axis is the primary axis, and the horizontal axis
is the secondary axis. And vice-versa.

What's the difference between Horizontal and Vertical Tabs ? ~

  Structurally, V2x3 is the same as H3x2.  The only difference
  is how Vim numbers the tabs, based on the axis that is the 
  primary axis.  
  
  IF the primary axis is vertical, then numbering starts in 
  col 1 and goes down the windows in col 1, then to the top 
  of col 2, then down col 2, and so on.  
  
  IF the primary axis is horizontal, numbering starts in 
  row 1 and goes left to right, then to row 2, left to right, 
  and so on.

  Most of the asymmetric tab builders defined in the plugin 
  use a vertical primary axis.  Developers can define any 
  mix of primary axis in their own tab builders -- See
  |TabwinsAddingNewBuilders|

====================================================================
Section 4: Tabwins Menu                                *TabwinsMenu*
====================================================================

In the Tabwins menu delivered with the plugin, the 
extent that populated tabs fill their buffers is dependent
on the shell vars available to the Vim session, and files/dirs
present in the local environment.

The menu items reference some of these shell vars.  

The developer is encouraged to customize tab builders to match 
local usage.

Update or replace func
  Tabwins_menu_build() ~
in tabwins.vim to include any set of tab builders.


====================================================================
Section 5: Configuration                      *TabwinsConfiguration*
====================================================================

The below globals are defined in tabwins.vim and are overridable.

To prevent 'Tabwins' menu addition when tabwins loads:
  let g:load_tabwins_menu_is_wanted       = 'N' ~

To change the 'Tabwins' menu number:
  let g:tabwins_menu_number = {menu_number} ~

To change the default top-line of netrw windows:
  let g:tabwins_netrw_line_number_default = {N} ~
Calls to Fill_tab() can override this on a per-tab basis.

To change the default netrw liststyle:
  let g:tabwins_netrw_liststyle_default   = {N} ~
Calls to Fill_tab() can override this on a per-tab basis.

To change V/H max dimensions:
  let g:tabwins_max_v_size                = {N}~
  let g:tabwins_max_h_size                = {N}  ~


====================================================================
Section 6: Adding New Builders            *TabwinsAddingNewBuilders*
====================================================================

NOTE: tabwins.vim v2.1.0 enables Vim command-line spec of buffer  ~
      fill and options.  The below text is still correct, but does  ~
      not cover the v2.1.0 enhancements, which will be described in  ~
      a later release.  The source code is open ... ;-) ~

      One change to the below is that in v2.1.1 'fill_content'  ~
      is the new identifier for the previous 'window_fill_specs' ~


1) ADDING SYMMETRIC TAB COMMANDS  (Empty Buffers) ~

Bump either/both values of:
  g:tabwins_max_v_size ~
  g:tabwins_max_h_size ~
above the values assigned in tabwins.vim. Loading tabwins.vim will
build commands for all the permutations of the size vars.

Of course, the set of symmetric tab builder commands can be reduced by 
updating the same globals.



2) ADDING ASYMMETRIC TAB COMMANDS  (Empty Buffers)~

Copy and update any of the 
  Create_tab_v{J...}()     ~
  Create_tab_h{J...}() ~
functions.

See the comments in the asymmetric command building code.



3) ADDING COMMANDS FOR TABS OF POPULATED BUFFERS ~

Update, clone, or replace any of the 
  Open_tab_*() ~
functions in tabwins.vim to create populated window structures.

Example in tabwins.vim:  ~

      " ---------------------------------------------------------------
      function! Open_tab_home_dir() ~
      " ---------------------------------------------------------------
        " 1ST, Create the windowed-tab
        :Tabwins 232 
        " VERTICAL ASYMMETRIC TAB.  3 cols, from left to right with 2, 3, 
        " and 2 windows successively left to right.

        let l:home_parent_dirpath = substitute(finddir($HOME), '\/\w\+$', '', 'g')

        "2ND, Fill buffers in the new tab ~
        "v2.1.1: 'fill_content' was previously 'window_fill_specs'
        call Fill_tab({
        \ 'line_number_at_window_top' : 1, ~
        \ 'fill_content' : [ ~
        \   $HOME,
        \   'Explore ' . l:home_parent_dirpath,
        \
        \   'edit! ~/.bashrc',
        \   '~/.gitignore',
        \   'enew!',
        \
        \   '~/.vimrc',
        \   '~/.vim',
        \ ]
        \})

        " Fill_tab() fills windows in the order of elements
        " in 'window_fill_specs' You want to spec something for each
        " of the windows created by :Tabwins 232 above,
        " either commands, filepaths, or dirpaths.
        " Specs can include shell or vim vars, and if files or dirs
        " the spec can include a vim command or use the default :edit or
        " :Explore call in Fill_tab()

        "3d, optional, apply Vim resize and/or other commands to the windows/buffers. ~
        2wincmd w
        resize 30

        1wincmd w
        "And end back in window 1
      endfunction

      NOTE: Since strings that specify commands are submitted to :execute,
      it should be possible to embed multiple commands in one of these
                               ~~~~~~~~~~~~~~~~~~~~~~~~
      strings, e.g. the resize commands above could be included via the
      Vim \| command concatenator.  This is not yet validated -- the 
      developer is encouraged to try this. Notes also that if resizes of
      multiple windows are intended, the order of the resizes can affect
      the result, so it may sometimes still be preferable to resize 
      after calling Fill_tab()


Every window-populating tab-builder calls Fill_tab(), with signature:  ~

      'explore_cmd_name'          : 'Explore',
      'fill_content'              : [],
      'netrw_liststyle'           : g:tabwins_netrw_liststyle_default,
      'line_number_at_window_top' : g:tabwins_netrw_line_number_default,
      'first_window_number'       : 1,
      'ending_window_number'      : 1,

See the Open_tab_*() functions for examples of overriding Fill_tab() ~
defaults. ~

See comments in tabwins.vim for more information.  ~


====================================================================
Section 7: License                                  *TabwinsLicense*
====================================================================

Copyright (c) 2013, Charles E. Sheridan

This program is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation,
version 2 of the License.
This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.

See the GNU General Public License version 2 for more details.


====================================================================
Section 8: Bugs                                        *TabwinsBugs*
====================================================================

Send bug reports and proposed fixes to 
  opensource at att.net


====================================================================
Section 9: Distributions                       *TabwinsDistributions*
====================================================================

github repository for this plugin
   https://github.com/cesheridan/tabwins ~


The top-level of the github repository includes an html version of 
this Vim .txt file, viewable in rendered form via
   http://htmlpreview.github.io/?https://github.com/cesheridan/tabwins/blob/master/tabwins.txt.html    ~


vim.org URL of this plugin 
   http://www.vim.org/scripts/script.php?script_id=4767


The distribution at vim.org is taken from the github repository.


====================================================================
Section 10: Credits                                 *TabwinsCredits*
====================================================================

 Author:  Charles E. Sheridan 
Contact:  opensource at att.net

